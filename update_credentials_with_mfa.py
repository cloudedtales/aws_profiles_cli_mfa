"""If you are using AWS CLI with an IAM account that requires MFA
it's easy enough to query for temporary credentials 
https://aws.amazon.com/premiumsupport/knowledge-center/authenticate-mfa-cli/
You can manually export them (or try to automate that in bash with the use of e.g. jq to parse JSON response)
However, if you are in the need of updating your .aws/credentials file, 
doing it manually every time your session token will expire is an annoying endeavor. 
This script will use your currently chosen AWS_PROFILE (default when nothing is selected) to:
1. Use sts get-session-token with MFA code You provide to get temporary credentials. 
2. Create an MFA profile in your .aws/credentials file if this profile does not exist 
3. Update an MFA profile in your .aws/credentials file if this profile does exist. 
TESTED ONLY ON WINDOWS AND LINUX !!!!
"""

import argparse
import boto3
from dateutil import tz
import sys
from pathlib import Path

serial_number = ""
token_code = ""
duration = ""
AccessKeyId = ""
SecretAccessKey = ""
SessionToken = ""
aws_profile_to_use = ""

def main():
    pull_args()
    get_temp_credentials()
    update_profiles()

def pull_args():
    global serial_number
    global token_code
    global duration
    global aws_profile_to_use
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("-s", "--serial-number", required = True, help = "MFA device ARN")
    parser.add_argument("-t", "--token-code", required = True, help = "One time password / token generated by MFA device")
    parser.add_argument("-d", "--duration", default = 3600, help = "Session duration in seconds defaults to 3600 sec (1h) " )
    parser.add_argument("-p", "--aws-profile", default = "default", help = "Profile to use when pulling credentials. Defaults to 'default'" )
    args = parser.parse_args()
    aws_profile_to_use = args.aws_profile
    serial_number = args.serial_number
    token_code = args.token_code
    duration = int(args.duration)

def get_temp_credentials():
    global serial_number
    global token_code
    global duration
    global AccessKeyId
    global SecretAccessKey
    global SessionToken
    global aws_profile_to_use

    session = boto3.Session(profile_name=aws_profile_to_use)
    client = session.client('sts')
    response = client.get_session_token(
        DurationSeconds=duration,
        SerialNumber=serial_number,
        TokenCode=token_code
    )
    AccessKeyId = response['Credentials']['AccessKeyId']
    SecretAccessKey = response['Credentials']['SecretAccessKey']
    SessionToken = response['Credentials']['SessionToken']
    expiry_date = response['Credentials']['Expiration']
    current_time_zone = tz.tzlocal()
    current_tz_exp_date = expiry_date.astimezone(current_time_zone)
    print(f'Bear in mind that session will expire at: {expiry_date} UTC. In your local Time Zone that is: {current_tz_exp_date}')

def update_profiles():
    update_config_file()
    update_credentials_file()

def update_credentials_file():
    global AccessKeyId
    global SecretAccessKey
    global SessionToken
    path = calculate_path()+"credentials"
    current_file = open(path, "r")
    string_list = current_file.readlines()
    current_file.close()
    if '[mfa]\n' in string_list:
        print('Updating existing profile in credentials file')
        profile_index = string_list.index('[mfa]\n')
        string_list[profile_index+1] = f'aws_access_key_id = {AccessKeyId}\n'
        string_list[profile_index+2] = f'aws_secret_access_key = {SecretAccessKey}\n'
        string_list[profile_index+3] = f'aws_session_token = {SessionToken}\n'
    else:
        print('Creating new profile in credentials file')
        string_list.append('\n')
        string_list.append('[mfa]\n')
        string_list.append(f'aws_access_key_id = {AccessKeyId}\n')
        string_list.append(f'aws_secret_access_key = {SecretAccessKey}\n')
        string_list.append(f'aws_session_token = {SessionToken}\n')

    current_file = open(path, "w")
    content = "".join(string_list)
    current_file.write(content)
    current_file.close()


def update_config_file():
    path = calculate_path()+"config"
    current_file = open(path, "r")
    string_list = current_file.readlines()
    current_file.close()
    if '[mfa]\n' in string_list:
        print('Updating existing profile in config file')
        profile_index = string_list.index('[mfa]\n')
        string_list[profile_index+1] = 'region = eu-west-1\n'
    else:
        print('Creating new profile in config file')
        string_list.append('\n')
        string_list.append('[mfa]\n')
        string_list.append('region = eu-west-1\n')

    current_file = open(path, "w")
    content = "".join(string_list)
    current_file.write(content)
    current_file.close()

def calculate_path():
    home = str(Path.home())
    return f"{home}/.aws/"

if __name__ == '__main__':
    main()